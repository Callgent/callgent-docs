import { atom, selector } from 'recoil';
import { asyncForEach, runShellCommand, vueFiles, writeFile } from '../util/webcontainer';

export const chatBoxState = atom<Array<any>>({
    key: 'chatBoxState',
    default: [
        { role: 'user', message: '你是谁' },
        { role: 'bot', message: "# NSS 介绍\n====================================\n\nNSS（Network Security Services）是一个由Mozilla开发的开源加密服务库，用于提供加密、解密、消息认证和数字签名等安全服务。\n\n## NSS 的主要功能\n-------------------\n\n*   加密和解密：NSS支持多种加密算法，包括AES、DES、RC4和RSA等。\n*   消息认证：NSS支持多种消息认证算法，包括HMAC和CMAC等。\n*   数字签名：NSS支持多种数字签名算法，包括RSA和ECDSA等。\n*   证书管理：NSS提供证书管理功能，支持X.509证书和CRL（证书吊销列表）。\n\n## NSS 的优势\n----------------\n\n*   高性能：NSS采用高效的加密算法和优化的实现，提供高性能的加密和解密服务。\n*   高安全性：NSS采用安全的加密算法和严格的安全检查，提供高安全性的加密服务。\n*   灵活性：NSS提供丰富的API，支持多种编程语言，易于集成到各种应用程序中。\n\n## NSS 的应用场景\n------------------\n\n*   网络安全：NSS常用于网络安全应用中，例如HTTPS、TLS和SSL等。\n*   数据保护：NSS可以用于保护数据的隐私和完整性，例如加密存储和传输数据。\n*   身份认证：NSS可以用于身份认证，例如数字签名和证书认证。\n\n## NSS 的使用\n-------------\n\nNSS提供C和C++的API，开发者可以使用这些API来集成NSS到自己的应用程序中。NSS也提供命令行工具，例如certutil和pk12util等，可以用于管理证书和密钥。" },
        { role: 'user', message: '给我一个页面' },
        {
            role: 'bot',
            type: 'web-ui',
            "packages": [
                "vue@3.5.12",
                "vue-router@4.4.5",
                "element-plus@2.8.6",
                "vee-validate@4.14.6",
                "yup@1.4.0",
                "axios@0.24.0",
                "pinia@2.2.4",
                "axios@1.7.7"
            ],
            "files": {
                "/src/components/WelcomeMessage.vue": "<template>\n  <div class=\"welcome-message\">\n    <h1>Welcome to Callgent!</h1>\n    <p>Your one-stop solution for managing calls and emails efficiently.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WelcomeMessage'\n};\n</script>\n\n<style scoped>\n.welcome-message {\n  text-align: center;\n  margin: 20px;\n}\n</style>",
                "/src/components/NavigationButtons.vue": "<template>\n  <div class=\"navigation-buttons\">\n    <router-link to=\"/callgent\">\n      <button class=\"btn btn-primary\">Go to Callgent</button>\n    </router-link>\n    <router-link to=\"/email\">\n      <button class=\"btn btn-secondary\">Go to Email</button>\n    </router-link>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'NavigationButtons',\n};\n</script>\n\n<style scoped>\n.navigation-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin: 20px 0;\n}\n.btn {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n</style>",
                "/src/components/Footer.vue": "<template>\n  <footer class=\"footer\">\n    <div class=\"footer-content\">\n      <p>&copy; 2023 Callgent. All rights reserved.</p>\n      <ul>\n        <li><a href=\"https://example.com/privacy\">Privacy Policy</a></li>\n        <li><a href=\"https://example.com/terms\">Terms of Service</a></li>\n      </ul>\n    </div>\n  </footer>\n</template>\n\n<script>\nexport default {\n  name: 'Footer'\n};\n</script>\n\n<style scoped>\n.footer {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  text-align: center;\n}\n.footer-content {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n.footer-content p {\n  margin: 0;\n}\n.footer-content ul {\n  list-style-type: none;\n  padding: 0;\n}\n.footer-content ul li {\n  display: inline;\n  margin: 0 10px;\n}\n.footer-content ul li a {\n  text-decoration: none;\n  color: #007bff;\n}\n</style>",
                "/src/components/PositionList.vue": "<template>\n  <div>\n    <h2>Job Positions</h2>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">Error: {{ error }}</div>\n    <ul>\n      <li v-for=\"position in positions\" :key=\"position.id\">\n        <h3>{{ position.title }}</h3>\n        <p>{{ position.description }}</p>\n        <p><strong>Location:</strong> {{ position.location }}</p>\n        <button @click=\"viewDetails(position.id)\">View Details</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { usePositionsStore } from '@/stores/positions';\n\nexport default defineComponent({\n  name: 'PositionList',\n  setup() {\n    const store = usePositionsStore();\n    store.fetchPositions();\n\n    return {\n      positions: store.getPositions(),\n      loading: store.isLoading(),\n      error: store.getError(),\n      viewDetails: (id) => {\n        // Trigger action to view position details\n      }\n    };\n  }\n});\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>",
                "/src/components/PositionDetail.vue": "<template>\n  <div class=\"position-detail\">\n    <h1>{{ position.title }}</h1>\n    <p>{{ position.description }}</p>\n    <p><strong>Location:</strong> {{ position.location }}</p>\n    <p><strong>Requirements:</strong></p>\n    <ul>\n      <li v-for=\"requirement in position.requirements\" :key=\"requirement\">{{ requirement }}</li>\n    </ul>\n    <button @click=\"apply\">Apply</button>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">Error: {{ error }}</div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, computed } from 'vue';\nimport { useStore } from 'pinia';\n\nexport default defineComponent({\n  props: {\n    positionId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const position = computed(() => store.getPositions.find(pos => pos.id === props.positionId));\n    const loading = computed(() => store.isLoading);\n    const error = computed(() => store.getError);\n\n    const fetchPositionDetails = async () => {\n      await store.fetchPositionDetails(props.positionId);\n    };\n\n    const apply = () => {\n      // Logic to open application form\n    };\n\n    fetchPositionDetails();\n\n    return { position, loading, error, apply };\n  }\n});\n</script>\n\n<style scoped>\n.position-detail {\n  padding: 20px;\n  border: 1px solid #ccc;\n}\n</style>",
                "/src/components/ApplicationForm.vue": "<template>\n  <div class=\"application-form\">\n    <h2>Apply for Position</h2>\n    <form @submit.prevent=\"submitApplication\">\n      <div>\n        <label for=\"applicantName\">Name:</label>\n        <input v-model=\"form.applicantName\" type=\"text\" id=\"applicantName\" required />\n        <span v-if=\"errors.applicantName\">{{ errors.applicantName }}</span>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input v-model=\"form.email\" type=\"email\" id=\"email\" required />\n        <span v-if=\"errors.email\">{{ errors.email }}</span>\n      </div>\n      <div>\n        <label for=\"resume\">Resume:</label>\n        <input v-model=\"form.resume\" type=\"file\" id=\"resume\" required accept=\"application/pdf\" />\n        <span v-if=\"errors.resume\">{{ errors.resume }}</span>\n      </div>\n      <div>\n        <label for=\"coverLetter\">Cover Letter:</label>\n        <textarea v-model=\"form.coverLetter\" id=\"coverLetter\"></textarea>\n        <span v-if=\"errors.coverLetter\">{{ errors.coverLetter }}</span>\n      </div>\n      <button type=\"submit\" :disabled=\"loading\">Submit</button>\n    </form>\n    <div v-if=\"loading\">Submitting...</div>\n    <div v-if=\"submissionStatus.success\">Application submitted successfully!</div>\n    <div v-if=\"submissionStatus.error\">{{ submissionStatus.error }}</div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { useStore } from 'pinia';\n\nexport default defineComponent({\n  props: {\n    positionId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const form = ref({\n      applicantName: '',\n      email: '',\n      resume: '',\n      coverLetter: ''\n    });\n    const errors = ref({});\n    const loading = ref(false);\n    const submissionStatus = ref({ success: false, error: null });\n\n    const validateForm = () => {\n      errors.value = {};\n      let isValid = true;\n      if (!form.value.applicantName) {\n        errors.value.applicantName = 'Name is required';\n        isValid = false;\n      }\n      if (!form.value.email) {\n        errors.value.email = 'Email is required';\n        isValid = false;\n      }\n      if (!form.value.resume) {\n        errors.value.resume = 'Resume is required';\n        isValid = false;\n      }\n      return isValid;\n    };\n\n    const submitApplication = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n      submissionStatus.value.success = false;\n      submissionStatus.value.error = null;\n      try {\n        const response = await store.submitApplication({\n          positionId: props.positionId,\n          applicantName: form.value.applicantName,\n          email: form.value.email,\n          resume: form.value.resume,\n          coverLetter: form.value.coverLetter,\n          appliedAt: new Date().toISOString()\n        });\n        if (response.status === 201) {\n          submissionStatus.value.success = true;\n        }\n      } catch (error) {\n        submissionStatus.value.error = error.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    return { form, errors, loading, submissionStatus, submitApplication };\n  }\n});\n</script>\n\n<style scoped>\n.application-form {\n  max-width: 500px;\n  margin: auto;\n}\n</style>",
                "/src/components/ApplicationStatus.vue": "<template>\n  <div class=\"application-status\">\n    <div v-if=\"loading\" class=\"spinner\">Loading...</div>\n    <div v-else-if=\"error\" class=\"error-message\">{{ error }}</div>\n    <div v-else>\n      <p v-if=\"submissionStatus\">{{ submissionStatus }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { usePositionsStore } from '@/stores/positions';\n\nexport default defineComponent({\n  name: 'ApplicationStatus',\n  setup() {\n    const positionsStore = usePositionsStore();\n    const loading = positionsStore.isLoading;\n    const error = positionsStore.getError;\n    const submissionStatus = positionsStore.submissionStatus; // Assuming this exists in your store\n\n    return { loading, error, submissionStatus };\n  }\n});\n</script>\n\n<style scoped>\n.application-status {\n  text-align: center;\n}\n.spinner {\n  font-size: 20px;\n}\n.error-message {\n  color: red;\n}\n</style>",
                "/src/components/EmailForm.vue": "<template>\n  <form @submit.prevent=\"submitEmail\">\n    <div>\n      <label for=\"recipientEmail\">Recipient Email:</label>\n      <input v-model=\"form.email\" type=\"email\" id=\"recipientEmail\" required />\n    </div>\n    <div>\n      <label for=\"subject\">Subject:</label>\n      <input v-model=\"form.subject\" type=\"text\" id=\"subject\" required />\n    </div>\n    <div>\n      <label for=\"body\">Body:</label>\n      <textarea v-model=\"form.body\" id=\"body\" required></textarea>\n    </div>\n    <button type=\"submit\" :disabled=\"loading\">Send Email</button>\n    <EmailSuccessMessage v-if=\"successMessage\" :message=\"successMessage\" />\n    <EmailErrorMessage v-if=\"errorMessage\" :message=\"errorMessage\" />\n  </form>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { useStore } from 'pinia';\nimport { usePositionsStore } from '../stores/positions';\nimport EmailSuccessMessage from './EmailSuccessMessage.vue';\nimport EmailErrorMessage from './EmailErrorMessage.vue';\n\nexport default defineComponent({\n  components: { EmailSuccessMessage, EmailErrorMessage },\n  setup() {\n    const store = usePositionsStore();\n    const form = ref({\n      email: '',\n      subject: '',\n      body: ''\n    });\n    const loading = ref(false);\n    const successMessage = ref('');\n    const errorMessage = ref('');\n\n    const submitEmail = async () => {\n      loading.value = true;\n      try {\n        const response = await store.applyForPosition(form.value);\n        successMessage.value = 'Email sent successfully!';\n        errorMessage.value = '';\n      } catch (error) {\n        errorMessage.value = 'Failed to send email.';\n        successMessage.value = '';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    return { form, submitEmail, loading, successMessage, errorMessage };\n  }\n});\n</script>\n",
                "/src/components/EmailSuccessMessage.vue": "<template>\n  <div v-if=\"isEmailSent\" class=\"success-message\">\n    <p>Email sent successfully!</p>\n    <button @click=\"resetStatus\">OK</button>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { useEmailStore } from '@/stores/email';\n\nexport default defineComponent({\n  setup() {\n    const emailStore = useEmailStore();\n    const isEmailSent = emailStore.isEmailSent;\n\n    const resetStatus = () => {\n      emailStore.resetEmailStatus();\n    };\n\n    return {\n      isEmailSent,\n      resetStatus,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.success-message {\n  color: green;\n  font-size: 1.2em;\n  margin: 20px 0;\n}\n</style>",
                "/src/components/EmailErrorMessage.vue": "<template>\n  <div v-if=\"errorMessage\" class=\"error-message\">\n    <p>{{ errorMessage }}</p>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { useEmailStore } from '@/stores/email';\n\nexport default defineComponent({\n  setup() {\n    const emailStore = useEmailStore();\n    const errorMessage = emailStore.getEmailError;\n\n    return { errorMessage };\n  },\n  watch: {\n    errorMessage(newMessage) {\n      if (newMessage) {\n        // Optionally, you can reset the email status after showing the error\n        this.$nextTick(() => {\n          emailStore.resetEmailStatus();\n        });\n      }\n    }\n  }\n});\n</script>\n\n<style scoped>\n.error-message {\n  color: red;\n  font-weight: bold;\n}\n</style>",
                "/src/stores/positions.js": "import { defineStore } from 'pinia'; import axios from 'axios'; const apiBaseUrl = 'http://localhost:3000/api/rest/invoke/TEST_CALLGENT_ID/TEST_CEN_ID'; export const usePositionsStore = defineStore('positions', { state: () => ({ positions: [{ id: '1', title: 'Software Engineer', description: 'Develop and maintain software applications.', location: 'Remote', requirements: ['JavaScript', 'Vue.js', 'Node.js'], createdAt: '2023-01-01T12:00:00Z', updatedAt: '2023-01-10T12:00:00Z' }], loading: false, error: null }), actions: { async fetchPositions() { this.loading = true; try { const response = await axios.get(`${apiBaseUrl}/positions`); this.positions = response.data; this.loading = false; } catch (error) { this.error = error; this.loading = false; } }, async fetchPositionDetails(positionId) { this.loading = true; try { const response = await axios.get(`${apiBaseUrl}/positions/${positionId}`); this.loading = false; return response.data; } catch (error) { this.error = error; this.loading = false; throw error; } }, async applyForPosition(positionId, applicantData) { try { const response = await axios.post(`${apiBaseUrl}/positions/${positionId}/apply`, applicantData); return response; } catch (error) { throw error; } }, }, getters: { getPositions: (state) => state.positions, isLoading: (state) => state.loading, getError: (state) => state.error, }, });",
                "/src/stores/email.js": "import { defineStore } from 'pinia'; import axios from 'axios'; const apiBaseUrl = 'http://localhost:3000/api/rest/invoke/TEST_CALLGENT_ID/TEST_CEN_ID'; export const useEmailStore = defineStore('email', { state: () => ({ emailStatus: 'success', errorMessage: 'Failed to send email' }), actions: { resetEmailStatus() { this.emailStatus = 'success'; this.errorMessage = ''; } }, getters: { isEmailSent: (state) => state.emailStatus === 'success', getEmailError: (state) => state.errorMessage } });",
                "/src/views/HomeView.vue": "<template>\n  <div class=\"home-view\">\n    <header>\n      <h1>Welcome to the Callgent App</h1>\n    </header>\n    <main>\n      <WelcomeMessage />\n      <NavigationButtons />\n    </main>\n    <Footer />\n  </div>\n</template>\n\n<script setup>\nimport WelcomeMessage from '@/components/WelcomeMessage.vue';\nimport NavigationButtons from '@/components/NavigationButtons.vue';\nimport Footer from '@/components/Footer.vue';\n</script>\n\n<style scoped>\n.home-view {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  text-align: center;\n  padding: 20px;\n}\nmain {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\nfooter {\n  text-align: center;\n  padding: 10px;\n}\n</style>",
                "/src/views/CallgentView.vue": "<template>\n  <div class=\"callgent-view\">\n    <h1>{{ title }}</h1>\n    <form @submit.prevent=\"handleSubmit\">\n      <div>\n        <label for=\"inputData\">Input Data:</label>\n        <input type=\"text\" v-model=\"inputData\" id=\"inputData\" required />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n    <div v-if=\"response\">\n      <h2>Response:</h2>\n      <p>{{ response }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'CallgentView',\n  title: 'Callgent Interface',\n  setup() {\n    const inputData = ref('');\n    const response = ref(null);\n\n    const handleSubmit = async () => {\n      try {\n        const res = await axios.post('/api/callgent', { data: inputData.value });\n        response.value = res.data;\n      } catch (error) {\n        console.error('Error submitting data:', error);\n        response.value = 'Submission failed.';\n      }\n    };\n\n    return { inputData, response, handleSubmit };\n  },\n};\n</script>\n\n<style scoped>\n.callgent-view {\n  max-width: 600px;\n  margin: auto;\n}\n</style>",
                "/src/views/EmailView.vue": "<template>\n  <div class=\"email-view\">\n    <h1>{{ title }}</h1>\n    <EmailForm @emailSent=\"handleEmailSent\" @emailError=\"handleEmailError\" />\n    <EmailSuccessMessage v-if=\"emailSent\" :message=\"successMessage\" />\n    <EmailErrorMessage v-if=\"emailError\" :message=\"errorMessage\" />\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport EmailForm from '../components/EmailForm.vue';\nimport EmailSuccessMessage from '../components/EmailSuccessMessage.vue';\nimport EmailErrorMessage from '../components/EmailErrorMessage.vue';\n\nexport default {\n  name: 'EmailView',\n  components: {\n    EmailForm,\n    EmailSuccessMessage,\n    EmailErrorMessage\n  },\n  data() {\n    return {\n      title: 'Email Interface',\n      emailSent: false,\n      emailError: false,\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    handleEmailSent(message) {\n      this.emailSent = true;\n      this.successMessage = message;\n      this.emailError = false;\n    },\n    handleEmailError(message) {\n      this.emailError = true;\n      this.errorMessage = message;\n      this.emailSent = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.email-view {\n  padding: 20px;\n}\n</style>"
            },
            "routes": [
                {
                    "path": "/home",
                    "name": "Home",
                    "component": "HomeView"
                },
                {
                    "path": "/callgent",
                    "name": "Callgent",
                    "component": "CallgentView"
                },
                {
                    "path": "/email",
                    "name": "Email",
                    "component": "EmailView"
                }
            ]
        }
    ],
});


export const webUiState = atom<{
    files?: object;
    packages?: Array<string>;
    routes?: Array<{ name: string, path: string, component: string }>;
}>({
    key: 'webUiState',
    default: {
        "packages": [
            "vue@3.5.12",
            "vue-router@4.4.5",
            "element-plus@2.8.6",
            "vee-validate@4.14.6",
            "yup@1.4.0",
            "axios@0.24.0",
            "pinia@2.2.4",
            "axios@1.7.7"
        ],
        "files": {
            "/src/components/WelcomeMessage.vue": "<template>\n  <div class=\"welcome-message\">\n    <h1>Welcome to Callgent!</h1>\n    <p>Your one-stop solution for managing calls and emails efficiently.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WelcomeMessage'\n};\n</script>\n\n<style scoped>\n.welcome-message {\n  text-align: center;\n  margin: 20px;\n}\n</style>",
            "/src/components/NavigationButtons.vue": "<template>\n  <div class=\"navigation-buttons\">\n    <router-link to=\"/callgent\">\n      <button class=\"btn btn-primary\">Go to Callgent</button>\n    </router-link>\n    <router-link to=\"/email\">\n      <button class=\"btn btn-secondary\">Go to Email</button>\n    </router-link>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'NavigationButtons',\n};\n</script>\n\n<style scoped>\n.navigation-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin: 20px 0;\n}\n.btn {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n</style>",
            "/src/components/Footer.vue": "<template>\n  <footer class=\"footer\">\n    <div class=\"footer-content\">\n      <p>&copy; 2023 Callgent. All rights reserved.</p>\n      <ul>\n        <li><a href=\"https://example.com/privacy\">Privacy Policy</a></li>\n        <li><a href=\"https://example.com/terms\">Terms of Service</a></li>\n      </ul>\n    </div>\n  </footer>\n</template>\n\n<script>\nexport default {\n  name: 'Footer'\n};\n</script>\n\n<style scoped>\n.footer {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  text-align: center;\n}\n.footer-content {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n.footer-content p {\n  margin: 0;\n}\n.footer-content ul {\n  list-style-type: none;\n  padding: 0;\n}\n.footer-content ul li {\n  display: inline;\n  margin: 0 10px;\n}\n.footer-content ul li a {\n  text-decoration: none;\n  color: #007bff;\n}\n</style>",
            "/src/components/PositionList.vue": "<template>\n  <div>\n    <h2>Job Positions</h2>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">Error: {{ error }}</div>\n    <ul>\n      <li v-for=\"position in positions\" :key=\"position.id\">\n        <h3>{{ position.title }}</h3>\n        <p>{{ position.description }}</p>\n        <p><strong>Location:</strong> {{ position.location }}</p>\n        <button @click=\"viewDetails(position.id)\">View Details</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { usePositionsStore } from '@/stores/positions';\n\nexport default defineComponent({\n  name: 'PositionList',\n  setup() {\n    const store = usePositionsStore();\n    store.fetchPositions();\n\n    return {\n      positions: store.getPositions(),\n      loading: store.isLoading(),\n      error: store.getError(),\n      viewDetails: (id) => {\n        // Trigger action to view position details\n      }\n    };\n  }\n});\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>",
            "/src/components/PositionDetail.vue": "<template>\n  <div class=\"position-detail\">\n    <h1>{{ position.title }}</h1>\n    <p>{{ position.description }}</p>\n    <p><strong>Location:</strong> {{ position.location }}</p>\n    <p><strong>Requirements:</strong></p>\n    <ul>\n      <li v-for=\"requirement in position.requirements\" :key=\"requirement\">{{ requirement }}</li>\n    </ul>\n    <button @click=\"apply\">Apply</button>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">Error: {{ error }}</div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, computed } from 'vue';\nimport { useStore } from 'pinia';\n\nexport default defineComponent({\n  props: {\n    positionId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const position = computed(() => store.getPositions.find(pos => pos.id === props.positionId));\n    const loading = computed(() => store.isLoading);\n    const error = computed(() => store.getError);\n\n    const fetchPositionDetails = async () => {\n      await store.fetchPositionDetails(props.positionId);\n    };\n\n    const apply = () => {\n      // Logic to open application form\n    };\n\n    fetchPositionDetails();\n\n    return { position, loading, error, apply };\n  }\n});\n</script>\n\n<style scoped>\n.position-detail {\n  padding: 20px;\n  border: 1px solid #ccc;\n}\n</style>",
            "/src/components/ApplicationForm.vue": "<template>\n  <div class=\"application-form\">\n    <h2>Apply for Position</h2>\n    <form @submit.prevent=\"submitApplication\">\n      <div>\n        <label for=\"applicantName\">Name:</label>\n        <input v-model=\"form.applicantName\" type=\"text\" id=\"applicantName\" required />\n        <span v-if=\"errors.applicantName\">{{ errors.applicantName }}</span>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input v-model=\"form.email\" type=\"email\" id=\"email\" required />\n        <span v-if=\"errors.email\">{{ errors.email }}</span>\n      </div>\n      <div>\n        <label for=\"resume\">Resume:</label>\n        <input v-model=\"form.resume\" type=\"file\" id=\"resume\" required accept=\"application/pdf\" />\n        <span v-if=\"errors.resume\">{{ errors.resume }}</span>\n      </div>\n      <div>\n        <label for=\"coverLetter\">Cover Letter:</label>\n        <textarea v-model=\"form.coverLetter\" id=\"coverLetter\"></textarea>\n        <span v-if=\"errors.coverLetter\">{{ errors.coverLetter }}</span>\n      </div>\n      <button type=\"submit\" :disabled=\"loading\">Submit</button>\n    </form>\n    <div v-if=\"loading\">Submitting...</div>\n    <div v-if=\"submissionStatus.success\">Application submitted successfully!</div>\n    <div v-if=\"submissionStatus.error\">{{ submissionStatus.error }}</div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { useStore } from 'pinia';\n\nexport default defineComponent({\n  props: {\n    positionId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const form = ref({\n      applicantName: '',\n      email: '',\n      resume: '',\n      coverLetter: ''\n    });\n    const errors = ref({});\n    const loading = ref(false);\n    const submissionStatus = ref({ success: false, error: null });\n\n    const validateForm = () => {\n      errors.value = {};\n      let isValid = true;\n      if (!form.value.applicantName) {\n        errors.value.applicantName = 'Name is required';\n        isValid = false;\n      }\n      if (!form.value.email) {\n        errors.value.email = 'Email is required';\n        isValid = false;\n      }\n      if (!form.value.resume) {\n        errors.value.resume = 'Resume is required';\n        isValid = false;\n      }\n      return isValid;\n    };\n\n    const submitApplication = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n      submissionStatus.value.success = false;\n      submissionStatus.value.error = null;\n      try {\n        const response = await store.submitApplication({\n          positionId: props.positionId,\n          applicantName: form.value.applicantName,\n          email: form.value.email,\n          resume: form.value.resume,\n          coverLetter: form.value.coverLetter,\n          appliedAt: new Date().toISOString()\n        });\n        if (response.status === 201) {\n          submissionStatus.value.success = true;\n        }\n      } catch (error) {\n        submissionStatus.value.error = error.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    return { form, errors, loading, submissionStatus, submitApplication };\n  }\n});\n</script>\n\n<style scoped>\n.application-form {\n  max-width: 500px;\n  margin: auto;\n}\n</style>",
            "/src/components/ApplicationStatus.vue": "<template>\n  <div class=\"application-status\">\n    <div v-if=\"loading\" class=\"spinner\">Loading...</div>\n    <div v-else-if=\"error\" class=\"error-message\">{{ error }}</div>\n    <div v-else>\n      <p v-if=\"submissionStatus\">{{ submissionStatus }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { usePositionsStore } from '@/stores/positions';\n\nexport default defineComponent({\n  name: 'ApplicationStatus',\n  setup() {\n    const positionsStore = usePositionsStore();\n    const loading = positionsStore.isLoading;\n    const error = positionsStore.getError;\n    const submissionStatus = positionsStore.submissionStatus; // Assuming this exists in your store\n\n    return { loading, error, submissionStatus };\n  }\n});\n</script>\n\n<style scoped>\n.application-status {\n  text-align: center;\n}\n.spinner {\n  font-size: 20px;\n}\n.error-message {\n  color: red;\n}\n</style>",
            "/src/components/EmailForm.vue": "<template>\n  <form @submit.prevent=\"submitEmail\">\n    <div>\n      <label for=\"recipientEmail\">Recipient Email:</label>\n      <input v-model=\"form.email\" type=\"email\" id=\"recipientEmail\" required />\n    </div>\n    <div>\n      <label for=\"subject\">Subject:</label>\n      <input v-model=\"form.subject\" type=\"text\" id=\"subject\" required />\n    </div>\n    <div>\n      <label for=\"body\">Body:</label>\n      <textarea v-model=\"form.body\" id=\"body\" required></textarea>\n    </div>\n    <button type=\"submit\" :disabled=\"loading\">Send Email</button>\n    <EmailSuccessMessage v-if=\"successMessage\" :message=\"successMessage\" />\n    <EmailErrorMessage v-if=\"errorMessage\" :message=\"errorMessage\" />\n  </form>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { useStore } from 'pinia';\nimport { usePositionsStore } from '../stores/positions';\nimport EmailSuccessMessage from './EmailSuccessMessage.vue';\nimport EmailErrorMessage from './EmailErrorMessage.vue';\n\nexport default defineComponent({\n  components: { EmailSuccessMessage, EmailErrorMessage },\n  setup() {\n    const store = usePositionsStore();\n    const form = ref({\n      email: '',\n      subject: '',\n      body: ''\n    });\n    const loading = ref(false);\n    const successMessage = ref('');\n    const errorMessage = ref('');\n\n    const submitEmail = async () => {\n      loading.value = true;\n      try {\n        const response = await store.applyForPosition(form.value);\n        successMessage.value = 'Email sent successfully!';\n        errorMessage.value = '';\n      } catch (error) {\n        errorMessage.value = 'Failed to send email.';\n        successMessage.value = '';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    return { form, submitEmail, loading, successMessage, errorMessage };\n  }\n});\n</script>\n",
            "/src/components/EmailSuccessMessage.vue": "<template>\n  <div v-if=\"isEmailSent\" class=\"success-message\">\n    <p>Email sent successfully!</p>\n    <button @click=\"resetStatus\">OK</button>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { useEmailStore } from '@/stores/email';\n\nexport default defineComponent({\n  setup() {\n    const emailStore = useEmailStore();\n    const isEmailSent = emailStore.isEmailSent;\n\n    const resetStatus = () => {\n      emailStore.resetEmailStatus();\n    };\n\n    return {\n      isEmailSent,\n      resetStatus,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.success-message {\n  color: green;\n  font-size: 1.2em;\n  margin: 20px 0;\n}\n</style>",
            "/src/components/EmailErrorMessage.vue": "<template>\n  <div v-if=\"errorMessage\" class=\"error-message\">\n    <p>{{ errorMessage }}</p>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useStore } from 'pinia';\nimport { useEmailStore } from '@/stores/email';\n\nexport default defineComponent({\n  setup() {\n    const emailStore = useEmailStore();\n    const errorMessage = emailStore.getEmailError;\n\n    return { errorMessage };\n  },\n  watch: {\n    errorMessage(newMessage) {\n      if (newMessage) {\n        // Optionally, you can reset the email status after showing the error\n        this.$nextTick(() => {\n          emailStore.resetEmailStatus();\n        });\n      }\n    }\n  }\n});\n</script>\n\n<style scoped>\n.error-message {\n  color: red;\n  font-weight: bold;\n}\n</style>",
            "/src/stores/positions.js": "import { defineStore } from 'pinia'; import axios from 'axios'; const apiBaseUrl = 'http://localhost:3000/api/rest/invoke/TEST_CALLGENT_ID/TEST_CEN_ID'; export const usePositionsStore = defineStore('positions', { state: () => ({ positions: [{ id: '1', title: 'Software Engineer', description: 'Develop and maintain software applications.', location: 'Remote', requirements: ['JavaScript', 'Vue.js', 'Node.js'], createdAt: '2023-01-01T12:00:00Z', updatedAt: '2023-01-10T12:00:00Z' }], loading: false, error: null }), actions: { async fetchPositions() { this.loading = true; try { const response = await axios.get(`${apiBaseUrl}/positions`); this.positions = response.data; this.loading = false; } catch (error) { this.error = error; this.loading = false; } }, async fetchPositionDetails(positionId) { this.loading = true; try { const response = await axios.get(`${apiBaseUrl}/positions/${positionId}`); this.loading = false; return response.data; } catch (error) { this.error = error; this.loading = false; throw error; } }, async applyForPosition(positionId, applicantData) { try { const response = await axios.post(`${apiBaseUrl}/positions/${positionId}/apply`, applicantData); return response; } catch (error) { throw error; } }, }, getters: { getPositions: (state) => state.positions, isLoading: (state) => state.loading, getError: (state) => state.error, }, });",
            "/src/stores/email.js": "import { defineStore } from 'pinia'; import axios from 'axios'; const apiBaseUrl = 'http://localhost:3000/api/rest/invoke/TEST_CALLGENT_ID/TEST_CEN_ID'; export const useEmailStore = defineStore('email', { state: () => ({ emailStatus: 'success', errorMessage: 'Failed to send email' }), actions: { resetEmailStatus() { this.emailStatus = 'success'; this.errorMessage = ''; } }, getters: { isEmailSent: (state) => state.emailStatus === 'success', getEmailError: (state) => state.errorMessage } });",
            "/src/views/HomeView.vue": "<template>\n  <div class=\"home-view\">\n    <header>\n      <h1>Welcome to the Callgent App</h1>\n    </header>\n    <main>\n      <WelcomeMessage />\n      <NavigationButtons />\n    </main>\n    <Footer />\n  </div>\n</template>\n\n<script setup>\nimport WelcomeMessage from '@/components/WelcomeMessage.vue';\nimport NavigationButtons from '@/components/NavigationButtons.vue';\nimport Footer from '@/components/Footer.vue';\n</script>\n\n<style scoped>\n.home-view {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  text-align: center;\n  padding: 20px;\n}\nmain {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\nfooter {\n  text-align: center;\n  padding: 10px;\n}\n</style>",
            "/src/views/CallgentView.vue": "<template>\n  <div class=\"callgent-view\">\n    <h1>{{ title }}</h1>\n    <form @submit.prevent=\"handleSubmit\">\n      <div>\n        <label for=\"inputData\">Input Data:</label>\n        <input type=\"text\" v-model=\"inputData\" id=\"inputData\" required />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n    <div v-if=\"response\">\n      <h2>Response:</h2>\n      <p>{{ response }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'CallgentView',\n  title: 'Callgent Interface',\n  setup() {\n    const inputData = ref('');\n    const response = ref(null);\n\n    const handleSubmit = async () => {\n      try {\n        const res = await axios.post('/api/callgent', { data: inputData.value });\n        response.value = res.data;\n      } catch (error) {\n        console.error('Error submitting data:', error);\n        response.value = 'Submission failed.';\n      }\n    };\n\n    return { inputData, response, handleSubmit };\n  },\n};\n</script>\n\n<style scoped>\n.callgent-view {\n  max-width: 600px;\n  margin: auto;\n}\n</style>",
            "/src/views/EmailView.vue": "<template>\n  <div class=\"email-view\">\n    <h1>{{ title }}</h1>\n    <EmailForm @emailSent=\"handleEmailSent\" @emailError=\"handleEmailError\" />\n    <EmailSuccessMessage v-if=\"emailSent\" :message=\"successMessage\" />\n    <EmailErrorMessage v-if=\"emailError\" :message=\"errorMessage\" />\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport EmailForm from '../components/EmailForm.vue';\nimport EmailSuccessMessage from '../components/EmailSuccessMessage.vue';\nimport EmailErrorMessage from '../components/EmailErrorMessage.vue';\n\nexport default {\n  name: 'EmailView',\n  components: {\n    EmailForm,\n    EmailSuccessMessage,\n    EmailErrorMessage\n  },\n  data() {\n    return {\n      title: 'Email Interface',\n      emailSent: false,\n      emailError: false,\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    handleEmailSent(message) {\n      this.emailSent = true;\n      this.successMessage = message;\n      this.emailError = false;\n    },\n    handleEmailError(message) {\n      this.emailError = true;\n      this.errorMessage = message;\n      this.emailSent = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.email-view {\n  padding: 20px;\n}\n</style>"
        },
        "routes": [
            {
                "path": "/home",
                "name": "Home",
                "component": "HomeView"
            },
            {
                "path": "/callgent",
                "name": "Callgent",
                "component": "CallgentView"
            },
            {
                "path": "/email",
                "name": "Email",
                "component": "EmailView"
            }
        ]
    },
});

export const webcontainerState = atom<any>({
    key: 'webcontainerState',
    default: null,
});

export const webcontainerUrl = atom<any>({
    key: 'webcontainerUrl',
    default: '',
});